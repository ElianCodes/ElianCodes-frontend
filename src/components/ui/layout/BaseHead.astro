---
export interface Props {
	title?: string;
	description?: string;
	socialImg?: URL;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

if (Astro.props.socialImg === undefined) {
	Astro.props.socialImg = new URL('/v1/generate/og/default.png', Astro.url);
}

const {
	title = 'Elian Codes',
	description = 'Elian Codes - Personal blog of Elian Van Cutsem',
	socialImg,
} = Astro.props;
---

<head>
	<meta charset='utf-8' />
	<meta name='viewport' content='width=device-width, initial-scale=1' />
	<meta name='generator' content={Astro.generator} />
	<meta name='author' content='Elian Van Cutsem' />

	<link
		rel='alternate'
		href='https://www.elian.codes/blog.xml'
		type='application/rss+xml'
	/>

	<meta name='title' content={`Elian Codes | ${title}`} />
	<meta name='description' content={description} />

	<meta property='og:type' content='website' />
	<meta property='og:url' content={canonicalURL} />
	<meta property='og:title' content={title} />
	<meta property='og:description' content={description} />
	<meta property='og:image' content={socialImg} />
	<meta property='og:image:alt' content='The Elian Codes Social image' />

	<meta property='twitter:card' content='summary_large_image' />
	<meta property='twitter:url' content={canonicalURL} />
	<meta property='twitter:title' content={title} />
	<meta property='twitter:description' content={description} />
	<meta property='twitter:image' content={socialImg} />
	<meta property='twitter:image:alt' content='The Elian Codes Social image' />

	<link rel='canonical' href={canonicalURL} />
	<link rel='icon' type='image/x-icon' href='/favicon.ico' />
	<link
		rel='apple-touch-icon'
		sizes='57x57'
		href='/icons/apple-icon-57x57.png'
	/>
	<link
		rel='apple-touch-icon'
		sizes='60x60'
		href='/icons/apple-icon-60x60.png'
	/>
	<link
		rel='apple-touch-icon'
		sizes='72x72'
		href='/icons/apple-icon-72x72.png'
	/>
	<link
		rel='apple-touch-icon'
		sizes='76x76'
		href='/icons/apple-icon-76x76.png'
	/>
	<link
		rel='apple-touch-icon'
		sizes='114x114'
		href='/icons/apple-icon-114x114.png'
	/>
	<link
		rel='apple-touch-icon'
		sizes='120x120'
		href='/icons/apple-icon-120x120.png'
	/>
	<link
		rel='apple-touch-icon'
		sizes='144x144'
		href='/icons/apple-icon-144x144.png'
	/>
	<link
		rel='apple-touch-icon'
		sizes='152x152'
		href='/icons/apple-icon-152x152.png'
	/>
	<link
		rel='apple-touch-icon'
		sizes='180x180'
		href='/icons/apple-icon-180x180.png'
	/>
	<link
		rel='icon'
		type='image/png'
		sizes='192x192'
		href='/icons/android-icon-192x192.png'
	/>
	<link
		rel='icon'
		type='image/png'
		sizes='32x32'
		href='/icons/favicon-32x32.png'
	/>
	<link
		rel='icon'
		type='image/png'
		sizes='96x96'
		href='/icons/favicon-96x96.png'
	/>
	<link
		rel='icon'
		type='image/png'
		sizes='16x16'
		href='/icons/favicon-16x16.png'
	/>

	<link rel='manifest' href='/manifest.json' />
	<meta name='msapplication-TileColor' content='#ffffff' />
	<meta name='msapplication-TileImage' content='/ms-icon-144x144.png' />
	<meta name='theme-color' content='#ffffff' />
	<meta name='theme-color' content='#6ee7b7' />

	<title>Elian Codes{title ? ` | ${title}` : ''}</title>

	<slot />

	<!-- Plausible Analytics -->
	<script
		is:inline
		defer
		data-domain='elian.codes'
		src='https://plausible.eliancodes.synology.me/js/script.file-downloads.outbound-links.js'
	></script>
	<!-- Google tag (gtag.js) -->
	<script
		is:inline
		async
		src='https://www.googletagmanager.com/gtag/js?id=G-13MBMB5GZJ'></script>
	<script is:inline>
		window.dataLayer = window.dataLayer || [];
		function gtag() {
			dataLayer.push(arguments);
		}
		gtag('js', new Date());

		gtag('config', 'G-13MBMB5GZJ');
	</script>
	<script is:inline>
		(function () {
			/** @type {any} */
			var w = window;
			w.plausible =
				w.plausible ||
				function () {
					(w.plausible.q = w.plausible.q || []).push(arguments);
				};
		})();
	</script>
</head>

<script is:inline>
	const theme = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
			return 'dark';
		}
		return 'light';
	};

	const applyTheme = () => {
		if (theme() === 'light') {
			document.documentElement.classList.remove('dark');
		} else {
			document.documentElement.classList.add('dark');
		}
	};

	window
		.matchMedia('(prefers-color-scheme: dark)')
		.addEventListener('change', (event) => {
			event.matches
				? window.localStorage.setItem('theme', 'dark')
				: window.localStorage.setItem('theme', 'light');
			applyTheme();
		});

	window.localStorage.setItem('theme', theme());
	applyTheme();
</script>
